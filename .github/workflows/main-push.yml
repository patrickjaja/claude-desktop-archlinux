name: Main Branch CI

on:
  push:
    branches:
      # Note: Pushing tags also triggers 'push' events. We filter later with 'if'.
      - main # Trigger on pushes to main
      - dev # Also trigger on pushes to this branch for testing
    paths: # Trigger if relevant files change
      - 'build.sh'
      - 'scripts/**'
      - '.github/workflows/**'
    tags:
      - 'v*' # Also trigger on version tags like v1.0, v2.1.3

  workflow_dispatch: # Allows manual triggering

jobs:
  codespell:
    name: Check Spelling
    uses: ./.github/workflows/codespell.yml


  # First, run the quick flag tests
  test-flags:
    name: Test Flags Parsing
    needs: codespell
    # Runner is defined in the called workflow (test-flags.yml)
    uses: ./.github/workflows/test-flags.yml
    # No inputs needed for test-flags.yml
 
  # Build AMD64 packages
  build-amd64:
    name: Build Packages (amd64 - ${{ matrix.flags || 'defaults' }})
    needs: test-flags # Run only if test-flags job succeeds
    # Runner is defined in the called workflow (build-amd64.yml)

    strategy:
      fail-fast: false # Allow other builds to continue if one fails
      matrix:
        include:
          - arch: amd64
            flags: "" # Defaults (deb, clean=yes)
            artifact_suffix: 'deb'
          - arch: amd64
            flags: "--build appimage --clean no"
            artifact_suffix: 'appimage'

    uses: ./.github/workflows/build-amd64.yml # Call the dedicated amd64 workflow
    with:
      build_flags: ${{ matrix.flags }}
      artifact_suffix: ${{ matrix.artifact_suffix }}
    # Secrets are not automatically passed to reusable workflows, pass if needed
    # secrets: inherit

  # Build ARM64 packages
  build-arm64:
    name: Build Packages (arm64 - ${{ matrix.flags || 'defaults' }})
    needs: test-flags # Run only if test-flags job succeeds
    # Runner is defined in the called workflow (build-arm64.yml)

    strategy:
      fail-fast: false # Allow other builds to continue if one fails
      matrix:
        include:
          - arch: arm64
            flags: "--clean no" # Implies deb build
            artifact_suffix: 'deb'
          - arch: arm64
            flags: "--build appimage"
            artifact_suffix: 'appimage'

    uses: ./.github/workflows/build-arm64.yml # Call the dedicated arm64 workflow
    with:
      build_flags: ${{ matrix.flags }}
      artifact_suffix: ${{ matrix.artifact_suffix }}
    # Secrets are not automatically passed to reusable workflows, pass if needed
    # secrets: inherit

  # Create Release job - runs only on tag pushes
  release:
    name: Create Release
    # Only run this job if the trigger was a tag push starting with 'v'
    if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref_name, '+claude')
    needs: [test-flags, build-amd64, build-arm64] # Ensure builds are successful
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create releases and upload assets

    steps:
      - name: Set Wrapper Version
        run: echo "WRAPPER_VERSION=1.0.0" >> $GITHUB_ENV

      - name: Make build script executable
        run: chmod +x ./build.sh

      - name: Get Claude Version
        id: get_version
        run: |
          echo "Detecting Claude version..."
          CLAUDE_VERSION=$(./build.sh --get-version)
          if [ -z "$CLAUDE_VERSION" ]; then
            echo "::error::Failed to get Claude version using build.sh --get-version"
            exit 1
          fi
          echo "Detected Claude Version: $CLAUDE_VERSION"
          echo "CLAUDE_VERSION=$CLAUDE_VERSION" >> $GITHUB_ENV
          echo "claude_version=$CLAUDE_VERSION" >> $GITHUB_OUTPUT

      - name: Verify Tag Format
        run: |
          EXPECTED_TAG="v${{ env.WRAPPER_VERSION }}+claude${{ env.CLAUDE_VERSION }}"
          ACTUAL_TAG="${{ github.ref_name }}"
          echo "Expected tag format: $EXPECTED_TAG"
          echo "Actual tag pushed: $ACTUAL_TAG"
          if [ "$EXPECTED_TAG" != "$ACTUAL_TAG" ]; then
            echo "::error::Pushed tag '$ACTUAL_TAG' does not match the expected format '$EXPECTED_TAG' (v<wrapper_version>+claude<claude_version>)."
            exit 1
          fi
          echo "âœ“ Tag format is correct."


      - name: Download AMD64 deb artifact
        uses: actions/download-artifact@v4
        with:
          name: package-amd64-deb
          path: artifacts/ # Download all artifacts into a single directory

      - name: Download AMD64 AppImage artifact
        uses: actions/download-artifact@v4
        with:
          name: package-amd64-appimage
          path: artifacts/

      - name: Download ARM64 deb artifact
        uses: actions/download-artifact@v4
        with:
          name: package-arm64-deb
          path: artifacts/

      - name: Download ARM64 AppImage artifact
        uses: actions/download-artifact@v4
        with:
          name: package-arm64-appimage
          path: artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/* # Upload all downloaded .deb and .AppImage files
          # The release name and tag will automatically use the pushed tag (e.g., v1.0.0)
          # GITHUB_TOKEN is automatically used for authentication